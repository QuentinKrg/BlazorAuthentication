@page "/login"

@using BlazorWasmAuthentication.Shared
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject ILoginViewModel _loginViewModel
@inject IAccessTokenService _accessTokenService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager

@attribute [AllowAnonymous]

<PageTitle>Index</PageTitle>

<h1>Authentication</h1>
<EditForm Model="@_loginViewModel" OnValidSubmit="@AuthenticateJWT">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div hidden="@HideDiv">
        <p class="text-danger">Nom d'utilisateur ou mot de passe invalide</p>
    </div>
    <div class="col-xl-6 col-md-8 col-12">
        <input id="inpu_userlogin" type="text" @bind="_loginViewModel.Userlogin" class="form-control dark-theme-textbox" placeholder="Login">
    </div>
    <br />
    <div class="col-xl-6 col-md-8 col-12">
        <input id="input_password" type="password" @bind="_loginViewModel.Password" class="form-control dark-theme-textbox" placeholder="Password">
    </div>
    <br />
    <div class="col-xl-6 col-md-8 col-12 row">
        <div class="col-xl-2 col-lg-2 col-md-6 col-sm-3 col-3">
            <button id="button_login" type="submit" class="btn btn-primary">Login</button>
        </div>
    </div>
</EditForm>

@code {
    public bool HideDiv { get; set; } = true;

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; } = null!;

    AuthenticationResponse authenticationResponse = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        if (authState.User.Identity.IsAuthenticated)
        {
            _navigationManager.NavigateTo("/");
        }

    }

    private async Task AuthenticateJWT()
    {
        authenticationResponse = await _loginViewModel.AuthenticateJWT();
        if (!string.IsNullOrEmpty(authenticationResponse.Token))
        {
            HideDiv = true;
            await _accessTokenService.SetAccessTokenAsync("jwt_token", authenticationResponse.Token);

            await ((CustomAuthenticationStateProvider)_authenticationStateProvider).MarkUserAsAuthenticated();

            _navigationManager.NavigateTo("/");
        }
        {
            // Show the div with the error message
            HideDiv = false;
            _loginViewModel.Password = "";
        }
    }

}